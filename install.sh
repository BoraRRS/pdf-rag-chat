#!/bin/bash

echo "üöÄ AselBoss AI Kurulum Scripti v2.1"
echo "===================================="
echo "üìö PyMuPDF4LLM destekli PDF RAG Sistemi"
echo ""

# Renk tanƒ±mlarƒ±
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Log fonksiyonu
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Hata durumunda √ßƒ±kƒ±≈ü
set -e
trap 'error "Kurulum ba≈üarƒ±sƒ±z oldu! Satƒ±r $LINENO"' ERR

# Python versiyonu kontrol et
log "Python versiyonu kontrol ediliyor..."
python_version=$(python3 --version 2>/dev/null)
if [ $? -eq 0 ]; then
    log "Python bulundu: $python_version"
    PYTHON_CMD="python3"
else
    python_version=$(python --version 2>/dev/null)
    if [ $? -eq 0 ]; then
        log "Python bulundu: $python_version"
        PYTHON_CMD="python"
    else
        error "Python bulunamadƒ±! L√ºtfen Python 3.8+ kurun."
        exit 1
    fi
fi

# Python versiyonu kontrol√º (3.8+ gerekli)
log "Python versiyon uyumluluƒüu kontrol ediliyor..."
python_version_check=$($PYTHON_CMD -c "import sys; print(sys.version_info >= (3, 8))")
if [ "$python_version_check" != "True" ]; then
    error "Python 3.8+ gerekli! Mevcut s√ºr√ºm√ºn√ºz eski."
    exit 1
fi

# pip versiyonu kontrol et
log "pip versiyonu kontrol ediliyor..."
if ! $PYTHON_CMD -m pip --version &> /dev/null; then
    error "pip bulunamadƒ±! pip kurulumunu kontrol edin."
    exit 1
fi

# Mevcut venv kontrol√º
if [ -d "venv" ]; then
    warning "Mevcut venv bulundu. Kaldƒ±rƒ±lƒ±yor..."
    rm -rf venv
fi

# Sanal ortam olu≈ütur
log "Sanal ortam olu≈üturuluyor..."
$PYTHON_CMD -m venv venv

# Sanal ortamƒ± aktif et
log "Sanal ortam aktifle≈ütiriliyor..."
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
    # Windows
    source venv/Scripts/activate
    ACTIVATE_CMD="venv\\Scripts\\activate"
else
    # macOS/Linux
    source venv/bin/activate
    ACTIVATE_CMD="source venv/bin/activate"
fi

# pip'i g√ºncelle
log "pip g√ºncelleniyor..."
pip install --upgrade pip setuptools wheel

# Requirements.txt'den kur
log "Temel k√ºt√ºphaneler kuruluyor..."
if [ -f "requirements.txt" ]; then
    pip install -r requirements.txt
else
    error "requirements.txt bulunamadƒ±!"
    exit 1
fi

# PyMuPDF4LLM √∂zel kurulumu ve testi
echo ""
info "ü§ñ PyMuPDF4LLM Kurulum ve Test"
info "================================"

# PyMuPDF4LLM'yi test et
if python -c "import pymupdf4llm; print('PyMuPDF4LLM version:', getattr(pymupdf4llm, '__version__', 'Unknown'))" 2>/dev/null; then
    log "PyMuPDF4LLM ba≈üarƒ±yla kuruldu ve test edildi!"
else
    warning "PyMuPDF4LLM kurulumunda sorun var, yeniden kuruluyor..."
    pip install --upgrade --force-reinstall pymupdf4llm
    
    # Tekrar test et
    if python -c "import pymupdf4llm" 2>/dev/null; then
        log "PyMuPDF4LLM yeniden kurulum ba≈üarƒ±lƒ±!"
    else
        error "PyMuPDF4LLM kurulumu ba≈üarƒ±sƒ±z!"
        echo "Manuel kurulum deneyin: pip install pymupdf4llm"
        exit 1
    fi
fi

# Temel import testleri
log "Kritik k√ºt√ºphaneler test ediliyor..."
python -c "
import streamlit
import langchain
import chromadb
import sentence_transformers
import pymupdf4llm
print('‚úÖ T√ºm temel k√ºt√ºphaneler ba≈üarƒ±yla import edildi!')
"

# OCR desteƒüi (opsiyonel)
echo ""
read -p "üîç OCR desteƒüi kurmak ister misiniz? (Geli≈ümi≈ü PDF i≈üleme i√ßin) (y/N): " install_ocr
if [[ $install_ocr =~ ^[Yy]$ ]]; then
    log "OCR k√ºt√ºphaneleri kuruluyor..."
    pip install opencv-python pytesseract pillow
    
    # Tesseract OCR kontrol√º
    if command -v tesseract &> /dev/null; then
        log "Tesseract OCR zaten kurulu"
        tesseract --version | head -1
    else
        warning "Tesseract OCR bulunamadƒ±!"
        info "Platform bazlƒ± kurulum talimatlarƒ±:"
        if [[ "$OSTYPE" == "darwin"* ]]; then
            echo "üçé macOS: brew install tesseract tesseract-lang"
        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
            echo "üêß Ubuntu/Debian: sudo apt install tesseract-ocr tesseract-ocr-tur"
            echo "üêß CentOS/RHEL: sudo yum install tesseract tesseract-langpack-tur"
        elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
            echo "ü™ü Windows: https://github.com/UB-Mannheim/tesseract/wiki"
        fi
    fi
fi

# Ollama kontrol√º
echo ""
info "ü¶ô Ollama Kontrol√º"
info "------------------"
if command -v ollama &> /dev/null; then
    log "Ollama bulundu"
    ollama --version
    
    # Ollama servis kontrol√º
    if pgrep -x "ollama" > /dev/null; then
        log "Ollama servisi √ßalƒ±≈üƒ±yor"
    else
        warning "Ollama servisi √ßalƒ±≈ümƒ±yor"
        info "Ba≈ülatmak i√ßin: ollama serve"
    fi
    
    # Model kontrol√º ve indirme
    log "Modeller kontrol ediliyor..."
    if ollama list | grep -q "llama3.1:8b"; then
        log "llama3.1:8b modeli mevcut"
    else
        read -p "üì• llama3.1:8b modelini indirmek ister misiniz? (Y/n): " download_model
        if [[ ! $download_model =~ ^[Nn]$ ]]; then
            info "Model indiriliyor (bu i≈ülem uzun s√ºrebilir)..."
            ollama pull llama3.1:8b
            
            if [ $? -eq 0 ]; then
                log "Model ba≈üarƒ±yla indirildi!"
            else
                error "Model indirme ba≈üarƒ±sƒ±z!"
            fi
        fi
    fi
    
    # Ek modeller √∂ner
    echo ""
    read -p "ü§ñ Ek modeller indirmek ister misiniz? (qwen2.5:7b, phi3:mini) (y/N): " install_extra_models
    if [[ $install_extra_models =~ ^[Yy]$ ]]; then
        info "Ek modeller indiriliyor..."
        ollama pull qwen2.5:7b || warning "qwen2.5:7b indirilemedi"
        ollama pull phi3:mini || warning "phi3:mini indirilemedi"
    fi
    
else
    error "Ollama bulunamadƒ±!"
    info "L√ºtfen Ollama'yƒ± indirin: https://ollama.ai"
    info "Kurulumdan sonra: ollama pull llama3.1:8b"
fi

# Dizin yapƒ±sƒ±nƒ± olu≈ütur
echo ""
log "Proje dizinleri olu≈üturuluyor..."
mkdir -p data/pdfs
mkdir -p vectorstore
mkdir -p debug_output
mkdir -p logs
log "Dizin yapƒ±sƒ± hazƒ±r"

# .gitignore olu≈ütur (yoksa)
if [ ! -f ".gitignore" ]; then
    log ".gitignore olu≈üturuluyor..."
    cat > .gitignore << EOF
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
env.bak/
venv.bak/

# Streamlit
.streamlit/

# PDF ve veri dosyalarƒ±
data/pdfs/*.pdf
vectorstore/
debug_output/*.txt
logs/*.log

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Temporary files
*.tmp
*.temp
EOF
    log ".gitignore olu≈üturuldu"
fi

# Geli≈ümi≈ü test scripti olu≈ütur
log "Geli≈ümi≈ü test scripti olu≈üturuluyor..."
cat > test_installation.py << 'EOF'
#!/usr/bin/env python3
"""AselBoss AI kapsamlƒ± kurulum testi"""

import sys
import subprocess
import importlib
from pathlib import Path

def test_python_version():
    """Python versiyonu testi"""
    print("üêç Python versiyonu testi...")
    version = sys.version_info
    print(f"   Python {version.major}.{version.minor}.{version.micro}")
    
    if version >= (3, 8):
        print("   ‚úÖ Python versiyonu uyumlu")
        return True
    else:
        print("   ‚ùå Python 3.8+ gerekli")
        return False

def test_imports():
    """K√ºt√ºphane import testleri"""
    print("\nüß™ K√ºt√ºphane testleri...")
    
    packages = [
        ("streamlit", "Web Framework"),
        ("langchain", "LangChain Core"),
        ("chromadb", "Vector Database"), 
        ("sentence_transformers", "Embeddings"),
        ("pymupdf4llm", "PDF Processing"),
        ("fitz", "PyMuPDF"),
        ("numpy", "Numerical Computing"),
        ("pandas", "Data Processing")
    ]
    
    results = []
    
    for package, description in packages:
        try:
            module = importlib.import_module(package)
            version = getattr(module, '__version__', 'Unknown')
            print(f"   ‚úÖ {description}: {package} ({version})")
            results.append(True)
        except ImportError as e:
            print(f"   ‚ùå {description}: {package} - {e}")
            results.append(False)
    
    return all(results)

def test_pymupdf4llm():
    """PyMuPDF4LLM √∂zel testi"""
    print("\nü§ñ PyMuPDF4LLM detay testi...")
    
    try:
        import pymupdf4llm
        version = getattr(pymupdf4llm, '__version__', 'Unknown')
        print(f"   ‚úÖ PyMuPDF4LLM s√ºr√ºm: {version}")
        
        # Temel fonksiyon testi
        funcs_to_test = ['to_markdown']
        for func in funcs_to_test:
            if hasattr(pymupdf4llm, func):
                print(f"   ‚úÖ {func} fonksiyonu mevcut")
            else:
                print(f"   ‚ö†Ô∏è {func} fonksiyonu bulunamadƒ±")
        
        return True
    except ImportError as e:
        print(f"   ‚ùå PyMuPDF4LLM import hatasƒ±: {e}")
        return False

def test_ollama():
    """Ollama sistem testi"""
    print("\nü¶ô Ollama testi...")
    
    try:
        result = subprocess.run(['ollama', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"   ‚úÖ Ollama version: {result.stdout.strip()}")
            
            # Model listesi kontrol√º
            result = subprocess.run(['ollama', 'list'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                models = result.stdout
                if 'llama3.1:8b' in models:
                    print("   ‚úÖ llama3.1:8b modeli mevcut")
                else:
                    print("   ‚ö†Ô∏è llama3.1:8b modeli bulunamadƒ±")
                
                # Diƒüer modeller
                other_models = ['qwen2.5:7b', 'phi3:mini']
                for model in other_models:
                    if model in models:
                        print(f"   ‚úÖ {model} modeli mevcut")
            
            return True
        else:
            print("   ‚ùå Ollama √ßalƒ±≈ümƒ±yor")
            return False
            
    except FileNotFoundError:
        print("   ‚ùå Ollama bulunamadƒ±")
        return False
    except subprocess.TimeoutExpired:
        print("   ‚ö†Ô∏è Ollama timeout")
        return False

def test_directories():
    """Dizin yapƒ±sƒ± testi"""
    print("\nüìÅ Dizin yapƒ±sƒ± testi...")
    
    required_dirs = [
        "data/pdfs",
        "vectorstore", 
        "debug_output",
        "utils"
    ]
    
    all_exist = True
    for dir_path in required_dirs:
        path = Path(dir_path)
        if path.exists():
            print(f"   ‚úÖ {dir_path}/")
        else:
            print(f"   ‚ùå {dir_path}/ bulunamadƒ±")
            all_exist = False
    
    return all_exist

def test_config():
    """Config dosyasƒ± testi"""
    print("\n‚öôÔ∏è Konfig√ºrasyon testi...")
    
    try:
        import config
        attrs = ['EMBEDDING_MODEL', 'CHUNK_SIZE', 'OLLAMA_MODEL']
        
        for attr in attrs:
            if hasattr(config, attr):
                value = getattr(config, attr)
                print(f"   ‚úÖ {attr}: {value}")
            else:
                print(f"   ‚ö†Ô∏è {attr} tanƒ±mlƒ± deƒüil")
        
        return True
    except ImportError:
        print("   ‚ùå config.py import edilemiyor")
        return False

def main():
    """Ana test fonksiyonu"""
    print("üöÄ AselBoss AI Kapsamlƒ± Kurulum Testi")
    print("=" * 50)
    
    tests = [
        ("Python Versiyonu", test_python_version),
        ("K√ºt√ºphane Import", test_imports),
        ("PyMuPDF4LLM", test_pymupdf4llm),
        ("Ollama", test_ollama),
        ("Dizin Yapƒ±sƒ±", test_directories),
        ("Konfig√ºrasyon", test_config)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"   ‚ùå {test_name} testi hatasƒ±: {e}")
            results.append((test_name, False))
    
    # Sonu√ß √∂zeti
    print("\n" + "=" * 50)
    print("üìä TEST SONU√áLARI:")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ BA≈ûARILI" if result else "‚ùå BA≈ûARISIZ"
        print(f"{status:12} | {test_name}")
        if result:
            passed += 1
    
    print("-" * 50)
    print(f"TOPLAM: {passed}/{total} test ba≈üarƒ±lƒ± ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("\nüéâ T√ºm testler ba≈üarƒ±lƒ±! Sistem kullanƒ±ma hazƒ±r.")
        print("üöÄ Ba≈ülatmak i√ßin: streamlit run app.py")
    else:
        print(f"\n‚ö†Ô∏è {total-passed} test ba≈üarƒ±sƒ±z. Sorunlarƒ± √ß√∂z√ºn ve tekrar test edin.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
EOF

chmod +x test_installation.py

# Clean script g√ºncellemesi
log "Clean script g√ºncelleniyor..."
cat > clean.py << 'EOF'
#!/usr/bin/env python3
"""
AselBoss AI i√ßin geli≈ümi≈ü temizlik scripti
Vekt√∂r veritabanƒ±, PDF'ler ve debug dosyalarƒ±nƒ± temizler
"""

import shutil
import argparse
from pathlib import Path
from datetime import datetime

def backup_data(backup_dir="backup"):
    """Veriyi yedekle"""
    backup_path = Path(backup_dir) / datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path.mkdir(parents=True, exist_ok=True)
    
    dirs_to_backup = ["data/pdfs", "vectorstore", "debug_output"]
    
    for dir_name in dirs_to_backup:
        src = Path(dir_name)
        if src.exists():
            dst = backup_path / dir_name
            shutil.copytree(src, dst, dirs_exist_ok=True)
            print(f"‚úÖ Yedeklendi: {dir_name} -> {dst}")
    
    print(f"üì¶ Yedek lokasyonu: {backup_path}")
    return backup_path

def cleanup_vectorstore():
    """Sadece vekt√∂r veritabanƒ±nƒ± temizle"""
    vector_store_dir = Path("vectorstore")
    
    if vector_store_dir.exists():
        print("üóëÔ∏è Vekt√∂r veritabanƒ± temizleniyor...")
        shutil.rmtree(vector_store_dir)
        vector_store_dir.mkdir(exist_ok=True)
        print("‚úÖ Vekt√∂r veritabanƒ± temizlendi!")
    else:
        print("‚ÑπÔ∏è Temizlenecek vekt√∂r veritabanƒ± bulunamadƒ±.")

def cleanup_debug():
    """Debug dosyalarƒ±nƒ± temizle"""
    debug_dir = Path("debug_output")
    if debug_dir.exists():
        debug_files = list(debug_dir.glob("*.txt"))
        if debug_files:
            print(f"üóëÔ∏è {len(debug_files)} debug dosyasƒ± siliniyor...")
            for file in debug_files:
                file.unlink()
            print("‚úÖ Debug dosyalarƒ± temizlendi!")
        else:
            print("‚ÑπÔ∏è Silinecek debug dosyasƒ± bulunamadƒ±.")

def cleanup_pdfs():
    """PDF dosyalarƒ±nƒ± temizle"""
    pdf_dir = Path("data/pdfs")
    if pdf_dir.exists():
        pdf_files = list(pdf_dir.glob("*.pdf"))
        if pdf_files:
            print(f"üóëÔ∏è {len(pdf_files)} PDF dosyasƒ± siliniyor...")
            for pdf_file in pdf_files:
                pdf_file.unlink()
            print("‚úÖ T√ºm PDF dosyalarƒ± silindi!")
        else:
            print("‚ÑπÔ∏è Silinecek PDF dosyasƒ± bulunamadƒ±.")

def cleanup_all_data(with_backup=False):
    """Her≈üeyi temizle"""
    
    if with_backup:
        backup_data()
    
    cleanup_vectorstore()
    cleanup_pdfs()
    cleanup_debug()
    
    # Logs temizle
    logs_dir = Path("logs")
    if logs_dir.exists():
        for log_file in logs_dir.glob("*.log"):
            log_file.unlink()
        print("‚úÖ Log dosyalarƒ± temizlendi!")
    
    # Bo≈ü dizinleri yeniden olu≈ütur
    dirs_to_create = ["data/pdfs", "vectorstore", "debug_output", "logs"]
    for dir_name in dirs_to_create:
        Path(dir_name).mkdir(parents=True, exist_ok=True)
    
    print("üìÅ Bo≈ü dizinler yeniden olu≈üturuldu.")

def main():
    parser = argparse.ArgumentParser(description="AselBoss AI Temizlik Scripti")
    parser.add_argument("--vectors", action="store_true", help="Sadece vekt√∂r DB temizle")
    parser.add_argument("--debug", action="store_true", help="Sadece debug dosyalarƒ±nƒ± temizle")
    parser.add_argument("--pdfs", action="store_true", help="Sadece PDF'leri temizle")
    parser.add_argument("--all", action="store_true", help="Her≈üeyi temizle")
    parser.add_argument("--backup", action="store_true", help="Temizlemeden √∂nce yedekle")
    
    args = parser.parse_args()
    
    if not any([args.vectors, args.debug, args.pdfs, args.all]):
        print("üöÄ AselBoss AI Temizlik Scripti")
        print("="*40)
        print("1Ô∏è‚É£ Sadece vekt√∂r DB temizle")
        print("2Ô∏è‚É£ Sadece debug dosyalarƒ±nƒ± temizle") 
        print("3Ô∏è‚É£ Sadece PDF'leri temizle")
        print("4Ô∏è‚É£ Her≈üeyi temizle")
        print("5Ô∏è‚É£ Yedekle ve her≈üeyi temizle")
        
        choice = input("Se√ßiminiz (1-5): ")
        
        if choice == "1":
            cleanup_vectorstore()
        elif choice == "2":
            cleanup_debug()
        elif choice == "3":
            cleanup_pdfs()
        elif choice == "4":
            cleanup_all_data()
        elif choice == "5":
            cleanup_all_data(with_backup=True)
        else:
            print("‚ùå Ge√ßersiz se√ßim!")
            return
    else:
        if args.vectors:
            cleanup_vectorstore()
        if args.debug:
            cleanup_debug()
        if args.pdfs:
            cleanup_pdfs()
        if args.all:
            cleanup_all_data(with_backup=args.backup)
    
    print("\nüîÑ ≈ûimdi uygulamanƒ±zƒ± yeniden ba≈ülatƒ±n.")

if __name__ == "__main__":
    main()
EOF

chmod +x clean.py

# Son kontroller
log "Son sistem kontrolleri yapƒ±lƒ±yor..."

# Test scripti √ßalƒ±≈ütƒ±r
log "Kurulum testi √ßalƒ±≈ütƒ±rƒ±lƒ±yor..."
python test_installation.py

echo ""
echo "üéâ AselBoss AI kurulumu tamamlandƒ±!"
echo ""
info "üìä KURULUM √ñZETƒ∞:"
info "=================="
log "Python sanal ortamƒ±"
log "T√ºm gerekli k√ºt√ºphaneler"
log "PyMuPDF4LLM (Markdown PDF i≈üleme)"
log "LangChain RAG sistemi"
log "ChromaDB vekt√∂r veritabanƒ±"
log "Streamlit web aray√ºz√º"

if [[ $install_ocr =~ ^[Yy]$ ]]; then
    log "OCR desteƒüi"
fi

echo ""
info "üöÄ BA≈ûLATMA TALƒ∞MATLARI:"
info "========================"
echo "1. Sanal ortamƒ± aktifle≈ütirin:"
echo "   $ACTIVATE_CMD"
echo ""
echo "2. Uygulamayƒ± ba≈ülatƒ±n:"
echo "   streamlit run app.py"
echo ""
echo "üîó Tarayƒ±cƒ±nƒ±zda a√ßƒ±lacak adres: http://localhost:8501"
echo ""
info "üìö √ñZELLƒ∞KLER:"
info "=============="
log "PyMuPDF4LLM ile geli≈ümi≈ü PDF i≈üleme"
log "Markdown formatƒ±nda √ßƒ±ktƒ±"
log "Akƒ±llƒ± tablo tanƒ±ma ve sayfa birle≈ütirme"
log "Konu≈üma hafƒ±zasƒ± (son 5 sohbet)"
log "√áoklu model desteƒüi"
log "Debug modu ve detaylƒ± analiz"
log "Developer modu"
echo ""
info "üîß YARDIMCI KOMUTLAR:"
echo "   python test_installation.py  # Sistem testi"
echo "   python clean.py             # Veri temizliƒüi"
echo ""
warning "‚ÑπÔ∏è Sorun ya≈üarsanƒ±z test_installation.py √ßalƒ±≈ütƒ±rƒ±n ve sonu√ßlarƒ± kontrol edin"

# Ba≈üarƒ± durumu
echo ""
log "Kurulum ba≈üarƒ±yla tamamlandƒ±! üéâ"